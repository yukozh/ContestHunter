//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContestHunter.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class CHDB : DbContext
    {
        public CHDB()
            : base("name=CHDB")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<CONTEST> CONTESTs { get; set; }
        public DbSet<CONTEST_ATTEND> CONTEST_ATTEND { get; set; }
        public DbSet<GROUP> GROUPs { get; set; }
        public DbSet<HUNT> HUNTs { get; set; }
        public DbSet<PROBLEM> PROBLEMs { get; set; }
        public DbSet<RATING> RATINGs { get; set; }
        public DbSet<RECORD> RECORDs { get; set; }
        public DbSet<TESTDATA> TESTDATAs { get; set; }
        public DbSet<USER> USERs { get; set; }
    
        public virtual ObjectResult<GetCFStanding_Result> GetCFStanding(Nullable<System.Guid> conID, Nullable<System.DateTime> relativeNow, Nullable<int> skip, Nullable<int> top, Nullable<bool> hasVirtual, Nullable<bool> hasNotSubmit)
        {
            var conIDParameter = conID.HasValue ?
                new ObjectParameter("ConID", conID) :
                new ObjectParameter("ConID", typeof(System.Guid));
    
            var relativeNowParameter = relativeNow.HasValue ?
                new ObjectParameter("RelativeNow", relativeNow) :
                new ObjectParameter("RelativeNow", typeof(System.DateTime));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("Top", top) :
                new ObjectParameter("Top", typeof(int));
    
            var hasVirtualParameter = hasVirtual.HasValue ?
                new ObjectParameter("HasVirtual", hasVirtual) :
                new ObjectParameter("HasVirtual", typeof(bool));
    
            var hasNotSubmitParameter = hasNotSubmit.HasValue ?
                new ObjectParameter("HasNotSubmit", hasNotSubmit) :
                new ObjectParameter("HasNotSubmit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCFStanding_Result>("GetCFStanding", conIDParameter, relativeNowParameter, skipParameter, topParameter, hasVirtualParameter, hasNotSubmitParameter);
        }
    
        public virtual ObjectResult<RecordList_Result> RecordList(Nullable<int> top, Nullable<int> skip, string name, string problem, string contest, Nullable<int> status, Nullable<int> language, Nullable<int> order)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("Top", top) :
                new ObjectParameter("Top", typeof(int));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("Skip", skip) :
                new ObjectParameter("Skip", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var problemParameter = problem != null ?
                new ObjectParameter("Problem", problem) :
                new ObjectParameter("Problem", typeof(string));
    
            var contestParameter = contest != null ?
                new ObjectParameter("Contest", contest) :
                new ObjectParameter("Contest", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var languageParameter = language.HasValue ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(int));
    
            var orderParameter = order.HasValue ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RecordList_Result>("RecordList", topParameter, skipParameter, nameParameter, problemParameter, contestParameter, statusParameter, languageParameter, orderParameter);
        }
    }
}
