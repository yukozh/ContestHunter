@model ContestHunter.Models.View.RegisterModel
@{
    ViewBag.Title = "注册";
    ViewBag.ActivedNav = "Register";
    ViewBag.NoIndex = true;
}

<script>
    function CheckPassword() {
        if ($('#Password').val() != $('#PasswordAgain').val()) {
            $('#pwdAgain').text('两次输入的密码不匹配')
            $('#pwdAgain')
                .removeClass('field-validation-valid')
                .addClass('field-validation-error');
            RefreshValidationMessage();
            return false;
        } else {
            $('#pwdAgain')
                .addClass('field-validation-valid')
                .removeClass('field-validation-error');
            RefreshValidationMessage();
        }
    }
</script>
<div class="span12" style="margin-top: 20px; padding: 10px">
    @using (Html.BeginForm("Register", "User", FormMethod.Post, new
    {
        id = "RegisterContent",
        @class = "alert alert-info",
        style = "text-align:center;",
        onsubmit = "return CheckPassword();"
    }))
    {
        @Html.AntiForgeryToken()
        <h2>用户注册</h2>
        <div style="padding-bottom: 20px">
            <div class="progress progress-striped progress-success active">
                <div class="bar" style="width: 25%;"></div>
            </div>
        </div>
        
        <div class="form-horizontal" style="display: inline-block;">
            <div class="control-group">
                @Html.LabelFor(x => x.Name, new { @class = "control-label" })
                <div class="controls">
                    @Html.TextBoxFor(x => x.Name, new { @class = "input-xlarge" })
                    @Html.ValidationMessageFor(x => x.Name)
                    @Html.DescriptionFor(x => x.Name, new { @class = "help-block" })
                    
                </div>
            </div>

            <div class="control-group">
                @Html.LabelFor(x => x.Password, new { @class = "control-label" })
                <div class="controls">
                    @Html.PasswordFor(x => x.Password, new { @class = "input-xlarge" })
                    @Html.ValidationMessageFor(x => x.Password)
                    @Html.DescriptionFor(x => x.Password, new { @class = "help-block" })
                </div>
            </div>

            <div id="grpPasswordAgain" class="control-group">
                @Html.Label("PasswordAgain", "重复密码", new { @class = "control-label" })
                <div class="controls">
                    @Html.Password("PasswordAgain", null, new { @class = "input-xlarge" })
                    @Html.ValidationMessage("PasswordAgain", new { id = "pwdAgain" })
                    <p class="help-block">再次输入您的密码，以供核对</p>
                </div>
            </div>

            <div class="control-group">
                @Html.LabelFor(x => x.Email, new { @class = "control-label" })
                <div class="controls">
                    @Html.TextBoxFor(x => x.Email, new { @class = "input-xlarge", type = "email" })
                    @Html.ValidationMessageFor(x => x.Email)
                    @Html.DescriptionFor(x => x.Email, new { @class = "help-block" })
                </div>
            </div>

            <div style="text-align: center">
                <input class="btn btn-primary" type="submit" value="下一步" />
            </div>

        </div>
    }
</div>
